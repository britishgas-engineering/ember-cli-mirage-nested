<h3>
  Those are your Ember models:
</h3>
<br />
{{mirage-seed-data/debug-ember-model-property
  model=model.ember
  propertyName="children.length"
}}
{{#each model.ember.children as |child|}}
  {{mirage-seed-data/debug-ember-model-property
    model=child
    propertyName="children.length"
  }}
  {{mirage-seed-data/debug-ember-model-property model=child propertyName="title"
  }}
{{/each}}
<br />
<br />
<br />
<h3>
  Those are your mirage seed data, play with it:
</h3>
<div class="row mt10">
  <div class="col-xs-10 col-xs-offset-1">
    parent: 1
    {{mirage-seed-data/debug-model
      model=model.mirage
      level=1
      refreshRoute=(route-action "refresh")
      parentAssociationsHaveChanged=(route-action "refresh")
      sendError=(route-action "sendError")
    }}
  </div>
</div>
{{#if error}}
  {{to-elsewhere
    named="modal"
    send=(hash
      body=(component
        "mirage-seed-data/error-modal"
        error=error
        close=(action (mut error) false)
      )
    )
  }}
{{/if}}
<br />
<br />
<h3>
  This is how you should write your scenario in scenarios/default:
</h3>
let parent, children, grandChildren, child;
<br />
parent = server.create('parent');
<br />
{{#with model.mirage.children.models as |children|}}
  {{#if children.length}}
    {{#if (eq children.length 1)}}
      child = parent.hasOne('children', {
      <br />
      title: "
      {{children.firstObject.title}}
      "
      <br />
      });
      <br />
      {{#each children as |child index|}}
        {{#with child.children.models as |grandChildren|}}
          {{#if grandChildren.length}}
            {{#if (eq grandChildren.length 1)}}
              grandChildren = child.hasOne('children');
            {{else}}
              grandChildren = child.hasMulti('children',
              {{grandChildren.length}}
              );
            {{/if}}
            <br />
          {{/if}}
        {{/with}}
      {{/each}}
    {{else}}
      children = parent.hasMulti('children',
      {{children.length}}
      );
      <br />
      {{#each children as |child index|}}
        {{#with child.children.models as |grandChildren|}}
          {{#if grandChildren.length}}
            {{#if (eq grandChildren.length 1)}}
              grandChildren = child[{{index}}].hasOne('children');
            {{else}}
              grandChildren = child[
              {{index}}
              ].hasMulti('children',
              {{grandChildren.length}}
              );
            {{/if}}
            <br />
          {{/if}}
        {{/with}}
      {{/each}}
    {{/if}}
  {{/if}}
{{/with}}